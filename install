#!/usr/bin/env bash

case "$OSTYPE" in
  darwin*)  x="OSX" ;; 
  linux*)   x="LINUX" ;;
  msys*)    x="WINDOWS" ;;
  *)        x="unknown: $OSTYPE" ;;
esac

echo $x

set -o pipefail

# Get init system used by OS (upstart, systemd, etc.)
function get_init_system() {
  init_from_process=$(sudo ps -p 1 | tail -n 1 | cut -d ":" -f 3 | cut -d " " -f 2)

  [[ $init_from_process == *"systemd"* ]] && echo "systemd" && return 1
  [[ $init_from_process == *"upstart"* ]] && echo "upstart" && return 1

  [ -x "$(command -v dpkg)" ] &&
    init_from_package_manager=$(sudo dpkg -S /sbin/init | cut -d ":" -f 1) ||
    init_from_package_manager=$(sudo rpm -qf /sbin/init)

  [[ $init_from_package_manager == *"systemd"* ]] && echo "systemd" && return 1
  [[ $init_from_package_manager == *"upstart"* ]] && echo "upstart" && return 1

  return 0
}

ask() {
  read -p "$* [y/N] " proceed
  [ ! "${proceed,,}" == "y" ] && return 1
  return 0
}

mode="install"
if [ -x "$(command -v ipfs)" ]; then
  ask ">>> IPFS already installed. Should it be updated?" || exit 0
  mode="update"
fi

if [ "$x" == "WINDOWS" ]; then
    echo ">>> Starting installation on Linux device compatible with $x"

    # Download and install IPFS

    echo ">>> Installing IPFS version $ipfs_version"

    echo ">>> Starting IPFS"

    echo ">>> All done."

elif [ "$x" == "LINUX" ]; then
    echo ">>> Starting installation on Linux device compatible with $x"

    # Download and install IPFS
    ipfs_arch=${2-"linux-386"}
    ipfs_version=$(curl -s https://dist.ipfs.io/go-ipfs/versions | tail -1)
    ipfs_version=${1-$ipfs_version}
    ipfs_version="v${ipfs_version#v}"

    echo ">>> Installing IPFS version $ipfs_version"

    tar_gz_destination=/tmp/go-ipfs_${ipfs_version}_${ipfs_arch}.tar.gz
    wget "https://dist.ipfs.io/go-ipfs/${ipfs_version}/go-ipfs_${ipfs_version}_${ipfs_arch}.tar.gz" \
    -q --show-progress \
    -O $tar_gz_destination

    if [ ! -f $tar_gz_destination ]; then
        echo ">>> Failed to download IPFS"
        exit 1
    fi

    ipfs_destination=/usr/local/bin/ipfs
    tar xzf $tar_gz_destination -C /tmp
    sudo install /tmp/go-ipfs/ipfs $ipfs_destination

    echo ">>> Starting IPFS"

    # Maybe initialize IPFS
    [ ! -d ~/.ipfs ] && ipfs init

    # Install and enable bring-up configurations for IPFS daemon
    init_system=$(get_init_system)
    ipfs_path=$HOME/.ipfs
    ipfs_user=$(whoami)
    ipfs_group=$(id -gn)

    if [ $init_system == "systemd" ]; then
        cat ./templates/ipfs-daemon.service.tpl | \
        sed "s|{{ipfs_path}}|${ipfs_path}|g" | \
        sed "s|{{ipfs_user}}|${ipfs_user}|g" | \
        sed "s|{{ipfs_group}}|${ipfs_group}|g" | \
        sudo tee /lib/systemd/system/ipfs-daemon.service > /dev/null

        sudo systemctl daemon-reload
        if [ "$mode" == "install" ]; then
            sudo systemctl enable --now ipfs-daemon
        elif [ "$mode" == "update" ]; then
            sudo systemctl restart ipfs-daemon
        fi
    elif [ $init_system == "upstart" ]; then
        cat ./templates/ipfs-daemon.conf.tpl | \
        sed "s|{{ipfs_path}}|${ipfs_path}|g" | \
        sed "s|{{ipfs_user}}|${ipfs_user}|g" | \
        sudo tee /etc/init/ipfs-daemon.conf > /dev/null

        sudo initctl reload-configuration
        if [ "$mode" == "install" ]; then
            sudo service ipfs-daemon start
        elif [ "$mode" == "update" ]; then
            sudo service ipfs-daemon stop
            sudo service ipfs-daemon start
        fi
    else
        echo ">>> Unable to detect init system - you don't seem to be using systemd or upstart. The IPFS daemon will have to be controlled manually."
    fi

    rm $tar_gz_destination

    echo ">>> All done."
fi
